{
    "content": "<div style='display: flex; justify-content: center; align-items: center;'><img src='../img/graph-summarization.png' alt='GraphSummarization' style='width: 100px; height: 100px;'></div> <div style='padding-bottom: 20px; text-align: center;'><font color='green'><h3>Graph Summarization</h3></font></div>",
    "depth": 1,
    "children": [
        {
            "content": "Bit Compression-based Reduction",
            "depth": 2,
            "children": [
                {
                    "content": "大部分是无损压缩",
                    "depth": 3
                },
                {
                    "content": "在源图中搜索具有共同子节点的节点并对其进行编码,<br>具有连续数字的子节点可以通过记录第一个数字的长度来编码,<br>剩余的子节点通过减去之前的子节点编号来编码",
                    "depth": 3
                },
                {
                    "content": "缺点: 没有考虑节点和边的属性",
                    "depth": 3
                }
            ]
        },
        {
            "content": "Simplification-based Reduction",
            "depth": 2,
            "children": [
                {
                    "content": "删除无关事件",
                    "depth": 3
                },
                {
                    "content": "e.g.LogGC, ProTracer, KCAL",
                    "depth": 3
                }
            ]
        },
        {
            "content": "Policy-based Reduction",
            "depth": 2,
            "children": [
                {
                    "content": "使用预定义策略",
                    "depth": 3
                },
                {
                    "content": "e.g.ProvWalls",
                    "depth": 3
                }
            ]
        },
        {
            "content": "Edge-grouping-based Reduction",
            "depth": 2,
            "children": [
                {
                    "content": "Causality-Preserving Reduction(CPR)",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/CPR.png' alt='CPR' style='width: 368px; height: 208px;'>",
                            "depth": 4
                        },
                        {
                            "content": "通过检测事件之间的因果关系, 将一些事件的数据溯源记录合并为一个事件的数据溯源记录, 从而减少数据溯源记录的开销",
                            "depth": 4
                        },
                        {
                            "content": "缺点: 无法处理一些特殊情况, 例如事件之间存在交错的因果关系",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "Process-centric Causality Approximation Reduction(PCAR)",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/PCAR.png' alt='PCAR' style='width: 452px; height: 242px;'>",
                            "depth": 4
                        },
                        {
                            "content": "通过检测进程之间的关系, 将一些进程的数据溯源记录合并为一个进程的数据溯源记录, 从而减少数据溯源记录的开销",
                            "depth": 4
                        },
                        {
                            "content": "可以处理一些特殊情况, 例如进程之间存在交错的因果关系",
                            "depth": 4
                        },
                        {
                            "content": "PCAR 通常与 CPR 结合使用, 以提高数据溯源记录的效率和准确性",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "Continuous Dependence (CD) preservation reduction",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/CD.png' alt='PCAR' style='width: 476px; height: 64px;'>",
                            "depth": 4
                        },
                        {
                            "content": "通过检测事件之间的连续依赖关系, 将一些事件的数据溯源记录合并为一个事件的数据溯源记录, 从而减少数据溯源记录的开销",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "Full Dependence (FD) preservation reduction",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/FD.png' alt='PCAR' style='width: 527px; height: 62px;'>",
                            "depth": 4
                        },
                        {
                            "content": "通过检测事件之间的全依赖关系, 将一些事件的数据溯源记录合并为一个事件的数据溯源记录, 从而减少数据溯源记录的开销",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "Source Dependence (SD) preservation",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/SD.png' alt='PCAR' style='width: 407px; height: 207px;'>",
                            "depth": 4
                        },
                        {
                            "content": "通过检测事件之间的源依赖关系, 将一些事件的数据溯源记录删除, 从而减少数据溯源记录的开销",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "GrAAFL",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/GrAAFL.png' alt='PCAR' style='width: 204px; height: 192px;'>",
                            "depth": 4
                        },
                        {
                            "content": "CD, FD 和 SD 都依赖于图(时间戳图)的全局属性, 其可达性随着时间的推移而变化",
                            "depth": 4
                        },
                        {
                            "content": "将时间戳图转换为朴素版本图, 然后应用不同的优化技术来减少边数和版本数(区分不同损失程度)",
                            "depth": 4
                        }
                    ]
                }
            ]
        },
        {
            "content": "Node-grouping-based Reduction",
            "depth": 2,
            "children": [
                {
                    "content": "NodeMerge",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/NodeMerge.png' alt='NodeMerge' style='width: 590px; height: 209px;'>",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "Winnower",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/Winnower.png' alt='Winnower' style='width: 215px; height: 193px;'>",
                            "depth": 4
                        },
                        {
                            "content": "为集群体可伸缩性的图摘要算法",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "LogApprox",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<img src='../img/LogApprox.png' alt='LogApprox' style='width: 587px; height: 177px;'>",
                            "depth": 4
                        },
                        {
                            "content": "基于一个观察结果: 大多数溯源数据存储由 I/O 事件占用",
                            "depth": 4
                        },
                        {
                            "content": "生成正则表达式来描述良性的 I/O 事件, 然后使用这些正则表达式来汇总溯源图",
                            "depth": 4
                        }
                    ]
                }
            ]
        },
        {
            "content": "<img src='../img/GraphSummarization.png' alt='GraphSummarization' style='width: 900px; height: 362px;'>",
            "depth": 2
        }
    ]
}