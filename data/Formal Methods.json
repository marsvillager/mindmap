{
    "content": "<div style='display: flex; justify-content: center; align-items: center;'><img src='../img/shirt.png' alt='Formalized' style='width: 100px; height: 100px;'></div> <div style='padding-bottom: 5px; text-align: center;'><font color='teal'><h3>Formal Methods</h3></font></div>",
    "depth": 1,
    "children": [
        {
            "content": "<b>形式化</b>与<b>公理化</b>不同, 但在近代数学中, 形式系统大多都是形式化的公理系统",
            "depth": 2
        },
        {
            "content": "形式系统由<b>形式语言</b>和<b>定义于其上的演绎结构</b>组成",
            "depth": 2,
            "children": [
                {
                    "content": "（1）初始符号",
                    "depth": 3
                },
                {
                    "content": "（2）形式规则",
                    "depth": 3
                },
                {
                    "content": "（3）公理",
                    "depth": 3
                },
                {
                    "content": "（4）变形规则",
                    "depth": 3
                }
            ]
        },
        {
            "content": "形式系统的<b>基本特点</b>",
            "depth": 2,
            "children": [
                {
                    "content": "（1）严格性",
                    "depth": 3
                },
                {
                    "content": "（2）抽象性",
                    "depth": 3
                }
            ]
        },
        {
            "content": "形式系统的<b>局限性</b>",
            "depth": 2,
            "children": [
                {
                    "content": "（1）不完备性",
                    "depth": 3,
                    "children": [
                        {
                            "content": "1931 年, 哥德尔提出的关于形式系统的“不完备性定理”指出: <br>如果一个形式的数学理论是足够复杂的（复杂到所有的递归函数在其中都能够表示）, 而且它是无矛盾的,<br>那么在这一理论中存在一个语句, 而这一语句在这一理论中是既不能证明也不能否证的",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "（2）不可判定性",
                    "depth": 3,
                    "children": [
                        {
                            "content": "如果对一类语句 C 而言, 存在一个算法 AL, 使得对 C 中的任一语句 S 而言,<br>可以利用算法 AL 来判定其是否成立，则 C 称为可判定的, 否则称为不可判定的",
                            "depth": 4
                        },
                        {
                            "content": "e.g. 停机问题（Halting Problem）无法通过算法或程序来确定是否正确",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "关键: 能否找到这样一个测试程序, 这个测试程序能判定任何一个程序在给定的输入下能否终止",
                                    "depth": 5
                                },
                                {
                                    "content": "反证法",
                                    "depth": 5
                                }
                            ]
                        }
                    ]
                },
                {
                    "content": "计算机系统就是一种形式系统, 因此, 计算机系统一样也具有形式系统的局限性",
                    "depth": 3
                }
            ]
        },
        {
            "content": "系统构建的关键: 系统的<b>形式化规格</b>",
            "depth": 2,
            "children": [
                {
                    "content": "计算机系统就是一种形式系统, 因此, 计算机系统一样也具有形式系统的局限性",
                    "depth": 3
                }
            ]
        }
    ]
}